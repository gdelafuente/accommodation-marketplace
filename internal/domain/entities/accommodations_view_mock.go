// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package entities

import (
	"context"
	"sync"
)

// Ensure, that AccommodationsViewMock does implement AccommodationsView.
// If this is not the case, regenerate this file with moq.
var _ AccommodationsView = &AccommodationsViewMock{}

// AccommodationsViewMock is a mock implementation of AccommodationsView.
//
//	func TestSomethingThatUsesAccommodationsView(t *testing.T) {
//
//		// make and configure a mocked AccommodationsView
//		mockedAccommodationsView := &AccommodationsViewMock{
//			FetchAccommodationsForSpecificationFunc: func(ctx context.Context, spec Specification) ([]Accommodation, error) {
//				panic("mock out the FetchAccommodationsForSpecification method")
//			},
//		}
//
//		// use mockedAccommodationsView in code that requires AccommodationsView
//		// and then make assertions.
//
//	}
type AccommodationsViewMock struct {
	// FetchAccommodationsForSpecificationFunc mocks the FetchAccommodationsForSpecification method.
	FetchAccommodationsForSpecificationFunc func(ctx context.Context, spec Specification) ([]Accommodation, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchAccommodationsForSpecification holds details about calls to the FetchAccommodationsForSpecification method.
		FetchAccommodationsForSpecification []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Spec is the spec argument value.
			Spec Specification
		}
	}
	lockFetchAccommodationsForSpecification sync.RWMutex
}

// FetchAccommodationsForSpecification calls FetchAccommodationsForSpecificationFunc.
func (mock *AccommodationsViewMock) FetchAccommodationsForSpecification(ctx context.Context, spec Specification) ([]Accommodation, error) {
	if mock.FetchAccommodationsForSpecificationFunc == nil {
		panic("AccommodationsViewMock.FetchAccommodationsForSpecificationFunc: method is nil but AccommodationsView.FetchAccommodationsForSpecification was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Spec Specification
	}{
		Ctx:  ctx,
		Spec: spec,
	}
	mock.lockFetchAccommodationsForSpecification.Lock()
	mock.calls.FetchAccommodationsForSpecification = append(mock.calls.FetchAccommodationsForSpecification, callInfo)
	mock.lockFetchAccommodationsForSpecification.Unlock()
	return mock.FetchAccommodationsForSpecificationFunc(ctx, spec)
}

// FetchAccommodationsForSpecificationCalls gets all the calls that were made to FetchAccommodationsForSpecification.
// Check the length with:
//
//	len(mockedAccommodationsView.FetchAccommodationsForSpecificationCalls())
func (mock *AccommodationsViewMock) FetchAccommodationsForSpecificationCalls() []struct {
	Ctx  context.Context
	Spec Specification
} {
	var calls []struct {
		Ctx  context.Context
		Spec Specification
	}
	mock.lockFetchAccommodationsForSpecification.RLock()
	calls = mock.calls.FetchAccommodationsForSpecification
	mock.lockFetchAccommodationsForSpecification.RUnlock()
	return calls
}
